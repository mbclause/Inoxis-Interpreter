/*
File: Interpreter.cpp
*/


// include statements
#include "Interpreter.h"



/*
Function: run
*/
void     Interpreter::run(antlr4::ANTLRInputStream input)
{
	myLexer lexer(input);

	//InoxisLexer lexer(&input);

	antlr4::CommonTokenStream tokens(&lexer);

	InoxisParser parser(&tokens);

	antlr4::tree::ParseTree* tree = parser.program();

	int numLexErrors = lexer.getErrorCount();

	size_t numParseErrors = parser.getNumberOfSyntaxErrors();

	if (numLexErrors + numParseErrors == 0)
	{
		auto s = tree->toStringTree(&parser);

		//cout << "Parse Tree: " << s << endl;

		antlr4::tree::ParseTreeWalker walker;

		walker.walk(&symTable, tree);

		if (symTable.numErrors == 0)
		{
			MemSafetyPass  memPass(symTable.treeFuncSymbols);

			walker.walk(&memPass, tree);

			if (memPass._numErrors == 0)
			{
				cout << "\n\nvm input pass\n";

				// output of this walk will be a GArray of function structs
				// this will be passed to the VM
				VMInputPass  vmInput(memPass.statLists, symTable.treeFuncSymbols, symTable.varListProp);

				//vmInput.test();

				walker.walk(&vmInput, tree);

				printVMInput(vmInput.functions);
			}
		}
	}
}




/*
Function: report_error
*/
void Interpreter::report_error(ERROR_TYPE type, int line)
{
	string error_type;

	if (type == SYNTAX_ERROR)
		error_type = "SYNTAX ERROR";
	else
		error_type = "MEMORY SAFETY ERROR";

	cerr << error_type << " at line " << line << ".\n";

	error_count++;
}


/*
Function: printVMInput
Description: print all of the input data generated by the VMInput Pass
Parameters: input - a garray of function structs
*/
void Interpreter::printVMInput(GArray* input)
{
	// for each function in the input...
	for (unsigned i = 0; i < input->len; i++)
	{
		// get the function
		function func = g_array_index(input, function, i);

		cout << "Function " << i + 1 << endl;

		// print the size of the locals array
		cout << "size of locals: " << func.symbols->len << endl;

		// loop through all statements
		for (unsigned j = 0; j < func.statements->len; j++)
		{
			statement stat = g_array_index(func.statements, statement, j);

			printStatement(stat);

			cout << endl;
		}

		cout << endl;
	}
}